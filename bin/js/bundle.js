var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**This class is automatically generated by LayaAirIDE, please do not make any modifications. */
var GameUI_1 = require("./script/GameUI");
/*
* 游戏初始化配置;
*/
var GameConfig = /** @class */ (function () {
    function GameConfig() {
    }
    GameConfig.init = function () {
        var reg = Laya.ClassUtils.regClass;
        reg("script/GameUI.ts", GameUI_1.default);
    };
    GameConfig.width = 640;
    GameConfig.height = 1136;
    GameConfig.scaleMode = "full";
    GameConfig.screenMode = "none";
    GameConfig.alignV = "top";
    GameConfig.alignH = "left";
    GameConfig.startScene = "test/TestScene.scene";
    GameConfig.sceneRoot = "";
    GameConfig.debug = false;
    GameConfig.stat = false;
    GameConfig.physicsDebug = false;
    GameConfig.exportSceneToJson = true;
    return GameConfig;
}());
exports.default = GameConfig;
GameConfig.init();
},{"./script/GameUI":4}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GameConfig_1 = require("./GameConfig");
var Main = /** @class */ (function () {
    function Main() {
        //根据IDE设置初始化引擎		
        if (window["Laya3D"])
            Laya3D.init(GameConfig_1.default.width, GameConfig_1.default.height);
        else
            Laya.init(GameConfig_1.default.width, GameConfig_1.default.height, Laya["WebGL"]);
        Laya["Physics"] && Laya["Physics"].enable();
        Laya["DebugPanel"] && Laya["DebugPanel"].enable();
        Laya.stage.scaleMode = GameConfig_1.default.scaleMode;
        Laya.stage.screenMode = GameConfig_1.default.screenMode;
        //兼容微信不支持加载scene后缀场景
        Laya.URL.exportSceneToJson = GameConfig_1.default.exportSceneToJson;
        //打开调试面板（通过IDE设置调试模式，或者url地址增加debug=true参数，均可打开调试面板）
        if (GameConfig_1.default.debug || Laya.Utils.getQueryString("debug") == "true")
            Laya.enableDebugPanel();
        if (GameConfig_1.default.physicsDebug && Laya["PhysicsDebugDraw"])
            Laya["PhysicsDebugDraw"].enable();
        if (GameConfig_1.default.stat)
            Laya.Stat.show();
        Laya.alertGlobalError = true;
        //激活资源版本控制，version.json由IDE发布功能自动生成，如果没有也不影响后续流程
        Laya.ResourceVersion.enable("version.json", Laya.Handler.create(this, this.onVersionLoaded), Laya.ResourceVersion.FILENAME_VERSION);
    }
    Main.prototype.onVersionLoaded = function () {
        //激活大小图映射，加载小图的时候，如果发现小图在大图合集里面，则优先加载大图合集，而不是小图
        Laya.AtlasInfoManager.enable("fileconfig.json", Laya.Handler.create(this, this.onConfigLoaded));
    };
    Main.prototype.onConfigLoaded = function () {
        //加载IDE指定的场景
        GameConfig_1.default.startScene && Laya.Scene.open(GameConfig_1.default.startScene);
    };
    return Main;
}());
//激活启动类
new Main();
},{"./GameConfig":1}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Vector3 = Laya.Vector3;
var Vector2 = Laya.Vector2;
var Label = Laya.Label;
var CameraMoveScript = /** @class */ (function (_super) {
    __extends(CameraMoveScript, _super);
    function CameraMoveScript() {
        var _this = _super.call(this) || this;
        _this.m_lastDistance = 0;
        _this.m_preRadian = 0;
        _this.m_forwardLength = 3;
        _this.m_lookAtPoint = new Vector3();
        _this.m_isTwoFingersTouch = false;
        _this.m_twoFingersDistance = 0;
        _this.IsShowLable = true;
        _this.Is2D = false;
        return _this;
    }
    CameraMoveScript.prototype.onAwake = function () {
        this.Init();
        this.AddEvenets();
        this.RefreshPitchRadian();
        this.RefreshLookAtPoint();
    };
    CameraMoveScript.prototype.onUpdate = function () {
        if (this.IsShowLable)
            this.ShowInfo();
        this.RayCastHit();
        this.CameraToZeroDistance();
    };
    CameraMoveScript.prototype.onDestroy = function () {
        this.RemoveEvents();
    };
    CameraMoveScript.prototype.Init = function () {
        this.m_camera = this.owner;
        this.m_tempVector3 = new Vector3();
        this.m_mousePoint = new Vector2();
        this.m_lastTouchFinger0 = new Vector2();
        this.m_lastTouchFinger1 = new Vector2();
        this.yawPitchRoll = new Laya.Vector3();
        this.resultRotation = new Laya.Quaternion();
        this.tempRotationZ = new Laya.Quaternion();
        this.tempRotationX = new Laya.Quaternion();
        this.tempRotationY = new Laya.Quaternion();
        this.m_ray = new Laya.Ray(new Vector3(), new Vector3());
        this.m_hitResult = new Laya.HitResult();
        if (this.IsShowLable)
            this.m_label = this.createLabel(new Vector2(10, 10));
        this.InitDiffPlatform();
    };
    /**
     * 不同平台不同配置，从json文件中读取
     */
    CameraMoveScript.prototype.InitDiffPlatform = function () {
        if (Laya.Browser.onAndroid || Laya.Browser.onIPhone || Laya.Browser.onMobile) {
            this.m_3dMoveSpeed = 0.02;
            this.m_3dRotateSpeed = 0.004;
            this.m_3dWheelSpeed = 2;
            this.m_2dMoveSpeed = 0.02;
            this.m_2dWheelSpeed = 2;
            this.m_3dMinZoomDistance = -30;
            this.m_3dMaxZoomDistance = 1000;
            this.m_3dMinCameraPitchRadian = 10 * Math.PI / 180;
            this.m_3dMaxCameraPitchRadian = 90 * Math.PI / 180;
            this.m_2dMinOrthographicSize = 12;
        }
        else if (Laya.Browser.onPC || Laya.Browser.onMac) {
            this.m_3dMoveSpeed = 0.04;
            this.m_3dRotateSpeed = 0.004;
            this.m_3dWheelSpeed = 2;
            this.m_2dMoveSpeed = 0.02;
            this.m_2dWheelSpeed = 2;
            this.m_3dMinZoomDistance = -30;
            this.m_3dMaxZoomDistance = 1000;
            this.m_3dMinCameraPitchRadian = 10 * Math.PI / 180;
            this.m_3dMaxCameraPitchRadian = 90 * Math.PI / 180;
            this.m_2dMinOrthographicSize = 12;
        }
    };
    CameraMoveScript.prototype.AddEvenets = function () {
        Laya.stage.on(Laya.Event.MOUSE_DOWN, this, this.mouseDown);
        Laya.stage.on(Laya.Event.MOUSE_UP, this, this.mouseUp);
        Laya.stage.on(Laya.Event.MOUSE_WHEEL, this, this.mouseWheel);
        Laya.stage.on(Laya.Event.MOUSE_MOVE, this, this.mouseMove);
        Laya.stage.on(Laya.Event.RIGHT_MOUSE_DOWN, this, this.rightMouseDown);
        Laya.stage.on(Laya.Event.RIGHT_MOUSE_UP, this, this.rightMouseUp);
    };
    CameraMoveScript.prototype.RemoveEvents = function () {
        Laya.stage.off(Laya.Event.MOUSE_DOWN, this, this.mouseDown);
        Laya.stage.off(Laya.Event.MOUSE_UP, this, this.mouseUp);
        Laya.stage.off(Laya.Event.MOUSE_WHEEL, this, this.mouseWheel);
        Laya.stage.off(Laya.Event.MOUSE_MOVE, this, this.mouseMove);
        Laya.stage.off(Laya.Event.RIGHT_MOUSE_DOWN, this, this.rightMouseDown);
        Laya.stage.off(Laya.Event.RIGHT_MOUSE_UP, this, this.rightMouseUp);
    };
    CameraMoveScript.prototype.mouseDown = function (e) {
        this.m_camera.transform.localRotation.getYawPitchRoll(this.yawPitchRoll);
        this.m_lastMouseX = Laya.stage.mouseX;
        this.m_lastMouseY = Laya.stage.mouseY;
        this.m_isMouseDown = true;
        // //Two fingers operation
        var touches = e.touches;
        if (touches && touches.length == 2) {
            this.m_lastTouchFinger0.x = touches[0].stageX;
            this.m_lastTouchFinger0.y = touches[0].stageY;
            this.m_lastTouchFinger1.x = touches[1].stageX;
            this.m_lastTouchFinger1.y = touches[1].stageY;
            this.m_lastDistance = this.getDistance(touches);
            this.m_preRadian = this.atan2Ext(touches[0].stageY - touches[1].stageY, touches[0].stageX - touches[1].stageX);
            this.m_isTwoFingersTouch = true;
        }
    };
    CameraMoveScript.prototype.mouseUp = function (e) {
        this.m_isMouseDown = false;
        var touches = e.touches;
        if (touches && touches.length == 0) {
            this.m_isTwoFingersTouch = false;
        }
    };
    CameraMoveScript.prototype.rightMouseDown = function (e) {
        this.m_lastMouseX = Laya.stage.mouseX;
        this.m_lastMouseY = Laya.stage.mouseY;
        this.m_isMouseDown = true;
        this.m_isRightMouseButtonDown = true;
    };
    CameraMoveScript.prototype.rightMouseUp = function (e) {
        this.m_isMouseDown = false;
        this.m_isRightMouseButtonDown = false;
    };
    CameraMoveScript.prototype.mouseWheel = function (e) {
        if (e == null)
            return;
        var zoomDelta = e.delta;
        if (this.Is2D) {
            this.m_camera.orthographicVerticalSize += -zoomDelta * this.m_2dWheelSpeed;
            if (this.m_camera.orthographicVerticalSize < this.m_2dMinOrthographicSize) {
                this.m_camera.orthographicVerticalSize = this.m_2dMinOrthographicSize;
            }
        }
        else {
            this.cameraZoom(zoomDelta);
        }
        if (this.OnMouseWheel)
            this.OnMouseWheel(zoomDelta);
    };
    CameraMoveScript.prototype.mouseMove = function (e) {
        var touches = e.touches;
        if (!touches) {
            this.moveControlByMouse();
        }
        else {
            this.moveCtrlByTouch(touches);
        }
    };
    /**
    *  鼠标模式
    */
    CameraMoveScript.prototype.moveControlByMouse = function () {
        if (this.m_isMouseDown) {
            var deltaX = Laya.stage.mouseX - this.m_lastMouseX;
            var deltaY = Laya.stage.mouseY - this.m_lastMouseY;
            if (!this.m_isRightMouseButtonDown) {
                if (this.m_isLastTouchDoubleFingers) {
                    deltaX = 0;
                    deltaY = 0;
                    this.m_isLastTouchDoubleFingers = false;
                }
                this.moveRight(-this.m_3dMoveSpeed * deltaX);
                this.moveUp(this.m_3dMoveSpeed * deltaY);
                this.RefreshLookAtPoint();
            }
            else {
                if (this.Is2D)
                    return;
                var deltaX_1 = Laya.stage.mouseX - this.m_lastMouseX;
                var deltaY_1 = Laya.stage.mouseY - this.m_lastMouseY;
                this.rotateAround(-deltaY_1 * this.m_3dRotateSpeed, -deltaX_1 * this.m_3dRotateSpeed);
            }
            this.m_lastMouseX = Laya.stage.mouseX;
            this.m_lastMouseY = Laya.stage.mouseY;
        }
    };
    /**
     * 触控模式
     */
    CameraMoveScript.prototype.moveCtrlByTouch = function (touches) {
        if (touches.length == 1 && !this.m_isTwoFingersTouch) {
            //单指触控
            // this.camera.transform.localRotation.getYawPitchRoll(this.yawPitchRoll);
            var deltaX = Laya.stage.mouseX - this.m_lastMouseX;
            var deltaY = Laya.stage.mouseY - this.m_lastMouseY;
            if (this.m_isLastTouchDoubleFingers) {
                //如果上一次操作是双指,如双指操作时,抬起一指变单指操作,要做个清零,防止摄像机跳跃
                deltaX = 0;
                deltaY = 0;
                this.m_isLastTouchDoubleFingers = false;
            }
            //let speed: number = 0.06;
            this.moveRight(-this.m_3dMoveSpeed * deltaX);
            this.moveUp(this.m_3dMoveSpeed * deltaY);
            this.m_lastMouseX = Laya.stage.mouseX;
            this.m_lastMouseY = Laya.stage.mouseY;
            this.RefreshLookAtPoint();
        }
        else if (touches.length == 2) {
            if (this.Is2D) {
                var distance2 = this.getDistance(touches);
                var factor2 = 0.1;
                var pinchValue2 = 0;
                pinchValue2 = (distance2 - this.m_lastDistance) * factor2;
                this.m_lastDistance = distance2;
                this.m_camera.orthographicVerticalSize -= pinchValue2;
                if (this.m_camera.orthographicVerticalSize < this.m_2dMinOrthographicSize) {
                    this.m_camera.orthographicVerticalSize = this.m_2dMinOrthographicSize;
                }
            }
            else {
                //双指触控
                this.m_isTwoFingersTouch = true;
                this.m_isLastTouchDoubleFingers = true;
                var twoFingersDistance = this.getTwoFingersDistance(touches);
                var deltaDistance = Math.abs(twoFingersDistance - this.m_twoFingersDistance);
                this.m_twoFingersDistance = twoFingersDistance;
                //Two fingers drag
                var deltaX0 = touches[0].stageX - this.m_lastTouchFinger0.x;
                var deltaY0 = touches[0].stageY - this.m_lastTouchFinger0.y;
                var deltaX1 = touches[1].stageX - this.m_lastTouchFinger1.x;
                var deltaY1 = touches[1].stageY - this.m_lastTouchFinger1.y;
                var deltaY = (deltaY0 + deltaY1) * 0.5;
                var deltaX = (deltaX0 + deltaX1) * 0.5;
                this.rotateAround(-deltaY * this.m_3dRotateSpeed, 0);
                this.m_lastTouchFinger0.x = touches[0].stageX;
                this.m_lastTouchFinger0.y = touches[0].stageY;
                this.m_lastTouchFinger1.x = touches[1].stageX;
                this.m_lastTouchFinger1.y = touches[1].stageY;
                //Two fingers pinch
                var distance = this.getDistance(touches);
                var factor = 0.01;
                var pinchValue = 0;
                pinchValue += (distance - this.m_lastDistance) * factor;
                this.m_lastDistance = distance;
                var fingerPinchSpeed = 10;
                this.cameraZoom(pinchValue * fingerPinchSpeed);
                if (this.OnDoubleFingersPinch)
                    this.OnDoubleFingersPinch(pinchValue);
                //Two fingers twist
                var nowRadian = this.atan2Ext(touches[0].stageY - touches[1].stageY, touches[0].stageX - touches[1].stageX);
                var deltaRadian = nowRadian - this.m_preRadian;
                if (deltaRadian != 0) {
                    var twistValue = 180 / Math.PI * deltaRadian;
                    this.rotateAround(0, twistValue * 0.1);
                    this.m_preRadian = nowRadian;
                    if (this.OnDoubleFingersTwist)
                        this.OnDoubleFingersTwist(twistValue);
                }
            }
        }
    };
    /**
     * 向前移动。
     * @param distance 移动距离。
     */
    CameraMoveScript.prototype.moveForward = function (distance) {
        this.m_tempVector3.x = this.m_tempVector3.y = 0;
        this.m_tempVector3.z = distance;
        this.m_camera.transform.translate(this.m_tempVector3);
    };
    /**
     * 向右移动。
     * @param distance 移动距离。
     */
    CameraMoveScript.prototype.moveRight = function (distance) {
        this.m_tempVector3.y = this.m_tempVector3.z = 0;
        this.m_tempVector3.x = distance;
        this.m_camera.transform.translate(this.m_tempVector3);
    };
    /**
     * 向上移动。
     * @param distance 移动距离。
     */
    CameraMoveScript.prototype.moveUp = function (distance) {
        this.m_tempVector3.x = this.m_tempVector3.z = 0;
        this.m_tempVector3.y = distance;
        this.m_camera.transform.translate(this.m_tempVector3, true);
    };
    /**
     * 缩放
     * @param delta
     */
    CameraMoveScript.prototype.cameraZoom = function (delta) {
        // if(this.m_hitObject!=null && !this.m_isRightMouseDown){
        //     this.m_forwardLength = this.getTwoPointsDistance(
        //         this.m_camera.transform.position,this.m_hitPoint);        
        // }
        var currentForwardLength = this.m_forwardLength;
        var distance = -delta * this.m_3dWheelSpeed;
        currentForwardLength += distance;
        if (delta > 0) {
            //拉近
            if (currentForwardLength < this.m_3dMinZoomDistance)
                distance += (this.m_3dMinZoomDistance - currentForwardLength);
        }
        else {
            //拉远
            if (currentForwardLength > this.m_3dMaxZoomDistance)
                distance -= (currentForwardLength - this.m_3dMaxZoomDistance);
        }
        this.moveForward(distance);
        this.m_forwardLength += distance;
    };
    /**
     * 旋转
     * @param angleX
     * @param angleY
     */
    CameraMoveScript.prototype.rotateAround = function (angleX, angleY) {
        var currentRadian = this.m_currentPitchRadian;
        currentRadian -= angleX;
        if (angleX < 0) {
            //下拖动,往上转
            if (currentRadian > this.m_3dMaxCameraPitchRadian)
                angleX += (currentRadian - this.m_3dMaxCameraPitchRadian);
        }
        else {
            //上拖动,往下转
            if (currentRadian < this.m_3dMinCameraPitchRadian)
                angleX += (currentRadian - this.m_3dMinCameraPitchRadian);
        }
        this.m_camera.transform.rotate(new Vector3(angleX, 0, 0));
        this.m_camera.transform.rotate(new Vector3(0, angleY, 0), false);
        var forward = new Vector3();
        this.m_camera.transform.getForward(forward);
        var newPosition = new Vector3();
        Vector3.scale(forward, -1, forward);
        newPosition = this.Forward(this.m_lookAtPoint, forward, this.m_forwardLength);
        this.m_camera.transform.position = newPosition;
        this.RefreshPitchRadian();
    };
    CameraMoveScript.prototype._updateRotation = function () {
        if (Math.abs(this.yawPitchRoll.y) < 1.50) {
            Laya.Quaternion.createFromYawPitchRoll(this.yawPitchRoll.x, this.yawPitchRoll.y, this.yawPitchRoll.z, this.tempRotationZ);
            this.tempRotationZ.cloneTo(this.m_camera.transform.localRotation);
            this.m_camera.transform.localRotation = this.m_camera.transform.localRotation;
        }
    };
    //把Math.atan2值域映射到[0, 2pi]
    CameraMoveScript.prototype.atan2Ext = function (y, x) {
        var radian = Math.atan2(y, x);
        if (radian >= 0)
            return radian;
        else
            return radian + 2 * Math.PI;
    };
    CameraMoveScript.prototype.getTwoFingersDistance = function (touches) {
        var fingersDistance = 0;
        var dx = touches[0].stageX - touches[1].stageX;
        var dy = touches[0].stageY - touches[1].stageY;
        fingersDistance = Math.sqrt(dx * dx + dy * dy);
        return fingersDistance;
    };
    CameraMoveScript.prototype.rotateAroundY = function (ponit, radius, angle) {
        var posX = Math.cos(angle) * radius;
        var posY = Math.sin(angle) * radius;
        this.m_camera.transform.position = new Vector3(posX, this.m_camera.transform.position.y, posY);
        this.m_camera.transform.lookAt(ponit, new Vector3(0, 1, 0), false);
    };
    CameraMoveScript.prototype.rotateAroundX = function (ponit, radius, angle) {
        this.m_camera.transform.rotate(new Vector3(angle, 0, 0));
        var forward = new Vector3();
        this.m_camera.transform.getForward(forward);
        var position = new Vector3();
        var deltaPosition = new Vector3();
        Vector3.scale(forward, -radius, deltaPosition);
        Vector3.add(ponit, deltaPosition, position);
        this.m_camera.transform.position = position;
    };
    //计算两个触摸点之间的距离
    CameraMoveScript.prototype.getDistance = function (points) {
        var distance = 0;
        if (points && points.length == 2) {
            var dx = points[0].stageX - points[1].stageX;
            var dy = points[0].stageY - points[1].stageY;
            distance = Math.sqrt(dx * dx + dy * dy);
        }
        return distance;
    };
    CameraMoveScript.prototype.getTwoPointsDistance = function (pointA, pointB) {
        var distance = 0;
        var dx = pointA.x - pointB.x;
        var dy = pointA.y - pointB.y;
        var dz = pointA.z - pointB.z;
        distance = Math.sqrt(dx * dx + dy * dy + dz * dz);
        return distance;
    };
    CameraMoveScript.prototype.Forward = function (position, direction, distance) {
        var deltaPosition = new Vector3();
        var newPosition = new Vector3();
        Vector3.scale(direction, distance, deltaPosition);
        Vector3.add(position, deltaPosition, newPosition);
        return newPosition;
    };
    CameraMoveScript.prototype.RefreshLookAtPoint = function () {
        var forward = new Vector3();
        this.m_camera.transform.getForward(forward);
        this.m_lookAtPoint = this.Forward(this.m_camera.transform.position, forward, this.m_forwardLength);
    };
    CameraMoveScript.prototype.RefreshPitchRadian = function () {
        this.m_camera.transform.localRotation.getYawPitchRoll(this.yawPitchRoll);
        this.m_currentPitchRadian = Math.abs(this.yawPitchRoll.y);
    };
    //temp
    CameraMoveScript.prototype.CameraToZeroDistance = function () {
        var dis = 0;
        if (this.Is2D) {
            dis = this.m_camera.orthographicVerticalSize;
        }
        else {
            var camPos = this.m_camera.transform.position;
            dis = Vector3.distance(camPos, Vector3._ZERO);
            this.m_label.text += "摄像机到原点的距离：" + dis;
        }
        //EventManager.Instance().PostEvent(Events.OnCameraDistanceChanged.toString(),dis);    
    };
    /**
     * 绕给定点和轴旋转
     * @param target 旋转对象
     * @param rotatePos 给定点位置
     * @param dir 给定方向
     * @param angle 旋转角度，弧度
     */
    CameraMoveScript.prototype.RotateAround = function (target, rotatePos, dir, angle) {
        //创建一个四元数
        var quaternion = new Laya.Quaternion();
        Laya.Quaternion.createFromAxisAngle(dir, angle, quaternion);
        //计算旋转后的Position
        var deltapos = new Laya.Vector3();
        Laya.Vector3.subtract(target.transform.position, rotatePos, deltapos);
        var changeVector3 = new Laya.Vector3();
        Laya.Vector3.transformQuat(deltapos, quaternion, changeVector3);
        var resultPos = new Laya.Vector3();
        Laya.Vector3.add(changeVector3, rotatePos, resultPos);
        target.transform.position = resultPos;
        //计算旋转后的Rotation
        var newRotation = new Laya.Quaternion();
        Laya.Quaternion.multiply(target.transform.rotation, quaternion, newRotation);
        target.transform.rotation = newRotation;
    };
    /**
    * 根据碰撞对象的位置，设置摄像机的缩放和旋转轴等；
    * 旋转操作，以屏幕中心点发出射线，如果有碰撞对象，则将碰撞点作为旋转中心，如果没有则将（0,0,0）设为旋转中心；
    * 缩放操作，以鼠标位置发出射线，若有碰撞对象，则根据碰撞点与摄像机的距离限制摄像机的最小距离；
    */
    CameraMoveScript.prototype.RayCastHit = function () {
        if (this.m_camera != null && this.m_scene3d != null) {
            this.m_mousePoint.x = Laya.stage.mouseX;
            this.m_mousePoint.y = Laya.stage.mouseY;
            this.m_camera.viewportPointToRay(this.m_mousePoint, this.m_ray);
            this.m_scene3d.physicsSimulation.rayCast(this.m_ray, this.m_hitResult);
            if (this.m_hitResult.succeeded) {
                this.m_hitObject = this.m_hitResult.collider.owner;
                this.m_hitPoint = this.m_hitResult.point;
            }
            else {
                this.m_hitObject = null;
            }
        }
    };
    /**
     * 创建一个Lable
     * @param color
     * @param strokeColor
     */
    CameraMoveScript.prototype.createLabel = function (pos, color, strokeColor) {
        var _color = "#ffffff";
        var _strokeColor = "#000000";
        var _strokeWidth = 1;
        var label = new Label();
        label.font = "Microsoft YaHei";
        label.text = "SAMPLE DEMO";
        label.fontSize = 20;
        if (color) {
            label.color = color;
        }
        else {
            label.color = _color;
        }
        if (strokeColor) {
            label.stroke = _strokeWidth;
            label.strokeColor = _strokeColor;
        }
        label.pos(pos.x, pos.y);
        Laya.stage.addChild(label);
        return label;
    };
    CameraMoveScript.prototype.ShowInfo = function () {
        var pos = this.m_camera.transform.position;
        var rot = this.m_camera.transform.rotationEuler;
        this.m_label.text = "Camera Pos : (" + pos.x.toFixed(2) + "," + pos.y.toFixed(2) + "," + pos.z.toFixed(2) + ")" + "\n";
        this.m_label.text += "Camera Rot : (" + rot.x.toFixed(2) + "," + rot.y.toFixed(2) + "," + rot.z.toFixed(2) + ")" + "\n";
        this.m_label.text += "Camera orthographicVerticalSize : " + this.m_camera.orthographicVerticalSize + "\n";
        this.m_label.text += "Mouse PosX : " + Laya.stage.mouseX + "\n";
        this.m_label.text += "Mouse PosY : " + Laya.stage.mouseY + "\n";
        this.m_label.text += "是否在2D: " + this.Is2D + "\n";
        this.m_label.text += "this forwardlength: " + this.m_forwardLength + "\n";
        this.m_label.text += "3dMoveSpeed : " + this.m_3dMoveSpeed + "\n";
        this.m_label.text += "2dMoveSpeed : " + this.m_2dMoveSpeed + "\n";
    };
    return CameraMoveScript;
}(Laya.Script3D));
exports.default = CameraMoveScript;
},{}],4:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var layaMaxUI_1 = require("./../ui/layaMaxUI");
var MtTween_1 = require("./MtTween");
var CameraMoveScript_1 = require("./CameraMoveScript");
/**
 * 本示例采用非脚本的方式实现，而使用继承页面基类，实现页面逻辑。在IDE里面设置场景的Runtime属性即可和场景进行关联
 * 相比脚本方式，继承式页面类，可以直接使用页面定义的属性（通过IDE内var属性定义），比如this.tipLbll，this.scoreLbl，具有代码提示效果
 * 建议：如果是页面级的逻辑，需要频繁访问页面内多个元素，使用继承式写法，如果是独立小模块，功能单一，建议用脚本方式实现，比如子弹脚本。
 */
var GameUI = /** @class */ (function (_super) {
    __extends(GameUI, _super);
    function GameUI() {
        var _this = _super.call(this) || this;
        //添加3D场景
        var scene = Laya.stage.addChild(new Laya.Scene3D());
        //添加照相机
        var camera = (scene.addChild(new Laya.Camera(0, 0.1, 100)));
        camera.transform.translate(new Laya.Vector3(0, 10, 18));
        camera.transform.rotate(new Laya.Vector3(-30, 0, 0), true, false);
        camera.clearColor = new Laya.Vector4(1, 1, 1, 1);
        camera.addComponent(CameraMoveScript_1.default);
        //添加方向光
        var directionLight = scene.addChild(new Laya.DirectionLight());
        directionLight.color = new Laya.Vector3(0.6, 0.6, 0.6);
        directionLight.transform.worldMatrix.setForward(new Laya.Vector3(1, -1, 0));
        // var box1 = new Laya.MeshSprite3D(Laya.PrimitiveMesh.createBox(1, 1, 1)) ;
        // scene.addChild(box1); 
        // box1.transform.rotate(new Laya.Vector3(0, 45, 0), false, false);
        // var material2: Laya.BlinnPhongMaterial = new Laya.BlinnPhongMaterial();
        // Laya.Texture2D.load("res/layabox.png", Laya.Handler.create(null, function(tex:Laya.Texture2D) {
        // 		material2.albedoTexture = tex;
        // }));
        // box1.meshRenderer.material = material2;
        //添加自定义模型
        _this.box = new Laya.MeshSprite3D(Laya.PrimitiveMesh.createBox(1, 1, 1));
        scene.addChild(_this.box);
        _this.box.transform.rotate(new Laya.Vector3(0, 45, 0), false, false);
        var material = new Laya.BlinnPhongMaterial();
        Laya.Texture2D.load("res/layabox.png", Laya.Handler.create(null, function (tex) {
            material.albedoTexture = tex;
        }));
        material.albedoColor = new Laya.Vector4(1, 1, 1, 0.3);
        _this.box.meshRenderer.material = material;
        Laya.stage.on(Laya.Event.KEY_DOWN, _this, function (e) {
            if (e.keyCode == Laya.Keyboard.SPACE) {
                //    let moveT = MtTween.Move(this.box,new Laya.Vector3(10,0,0),1000); moveT.repeat = 0;
                //    let rotateT = MtTween.Rotate(this.box,new Laya.Vector3(0,90,0),1000); rotateT.repeat = 0;
                var scaleT = MtTween_1.default.Scale(_this.box, new Laya.Vector3(5, 5, 5), 1000);
                scaleT.repeat = 0;
                var alphat = MtTween_1.default.Alpha(_this.box, 0.5, 1000); // alphat.repeat = 0;
                // let mat = this.box.meshRenderer.material as Laya.BlinnPhongMaterial;
                // mat.albedoColor = new Laya.Vector4(1,1,1,0.5);
            }
        });
        return _this;
    }
    return GameUI;
}(layaMaxUI_1.ui.test.TestSceneUI));
exports.default = GameUI;
},{"./../ui/layaMaxUI":6,"./CameraMoveScript":3,"./MtTween":5}],5:[function(require,module,exports){
"use strict";
/**
 * ~封装Laya.Tween，用于适应Sprite3D的缓动效果。
 * ~Laya.Tween之所以不适用于Sprite3D是因为浅拷贝变量无法同步到原对象中去；
 * ~解决方式是：Laya.Tween来改变变量值，用update更新对象对应的变量值；
 * ~封装原生的Laya.Tween，支持所有Ease效果
 */
Object.defineProperty(exports, "__esModule", { value: true });
var Handler = Laya.Handler;
var MtTween = /** @class */ (function () {
    function MtTween() {
    }
    /**
     * 平移，改变Target的位置
     * @param target 目标，必须为Sprite3D
     * @param position 移动的目标位置,Vector3
     * @param duration 移动的时间
     * @param ease 缓动方式
     * @param complete 完成回掉
     * @param delay 延迟缓动时间
     * @param coverBefore 是否覆盖之前的缓动。
     * @param autoRecover 是否自动回收，默认为true，缓动结束之后自动回收到对象池。
     */
    MtTween.Move = function (target, position, duration, ease, complete, delay, coverBefore, autoRecover) {
        if (target == null)
            return null;
        var pos = target.transform.position;
        var tween = Laya.Tween.to(pos, {
            x: position.x,
            y: position.y,
            z: position.z,
            update: new Handler(target, function () {
                this.transform.position = pos;
            })
        }, duration, ease, complete, delay, coverBefore, autoRecover);
        return tween;
    };
    /**
     * 旋转，改变Target的旋转角度
     * @param target 目标，必须为Sprite3D
     * @param rotation 移动的目标旋转角度,Vector3
     * @param duration 移动的时间
     * @param ease 缓动方式
     * @param complete 完成回掉
     * @param delay 延迟缓动时间
     * @param coverBefore 是否覆盖之前的缓动。
     * @param autoRecover 是否自动回收，默认为true，缓动结束之后自动回收到对象池。
     */
    MtTween.Rotate = function (target, rotation, duration, ease, complete, delay, coverBefore, autoRecover) {
        if (target == null)
            return null;
        var rot = target.transform.rotationEuler;
        var tween = Laya.Tween.to(rot, {
            x: rotation.x,
            y: rotation.y,
            z: rotation.z,
            update: new Handler(target, function () {
                this.transform.rotationEuler = rot;
            })
        }, duration, ease, complete, delay, coverBefore, autoRecover);
        return tween;
    };
    /**
     * 缩放 改变Target的缩放值
     * @param target 目标，必须为Sprite3D
     * @param scale 移动的目标缩放,Vector3
     * @param duration 移动的时间
     * @param ease 缓动方式
     * @param complete 完成回掉
     * @param delay 延迟缓动时间
     * @param coverBefore 是否覆盖之前的缓动。
     * @param autoRecover 是否自动回收，默认为true，缓动结束之后自动回收到对象池。
     */
    MtTween.Scale = function (target, scale, duration, ease, complete, delay, coverBefore, autoRecover) {
        if (target == null)
            return null;
        var _scale = target.transform.scale;
        var tween = Laya.Tween.to(_scale, {
            x: scale.x,
            y: scale.y,
            z: scale.z,
            update: new Handler(target, function () {
                this.transform.scale = _scale;
            })
        }, duration, ease, complete, delay, coverBefore, autoRecover);
        return tween;
    };
    /**
     * 透明度 改变Target的透明度，必须将模型的RenderMode改成Transparent
     * @param target Target,必须有MeshRender
     * @param aplha 透明度
     * @param duration 缓动的时间
     * @param ease 缓动方式
     * @param complete 完成回掉
     * @param delay 延迟缓动时间
     * @param coverBefore 是否覆盖之前的缓动。
     * @param autoRecover 是否自动回收，默认为true，缓动结束之后自动回收到对象池。
     */
    MtTween.Alpha = function (target, aplha, duration, ease, complete, delay, coverBefore, autoRecover) {
        if (target == null)
            return null;
        var render = target.meshRenderer;
        if (render && render.material) {
            var mat_1 = render.material;
            mat_1.renderMode = Laya.BlinnPhongMaterial.RENDERMODE_TRANSPARENT;
            var albedo_1 = mat_1.albedoColor;
            if (albedo_1) {
                var tween_1 = Laya.Tween.to(albedo_1, {
                    w: aplha,
                    update: new Handler(target, function () {
                        this.meshRenderer.material.albedoColor = albedo_1;
                    })
                }, duration, ease, Handler.create(target, function () {
                    if (!tween_1.repeat)
                        mat_1.renderMode = Laya.BlinnPhongMaterial.RENDERMODE_OPAQUE;
                    if (complete)
                        complete.run();
                }), delay, coverBefore, autoRecover);
                return tween_1;
            }
        }
        return null;
    };
    return MtTween;
}());
exports.default = MtTween;
},{}],6:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Scene = Laya.Scene;
var REG = Laya.ClassUtils.regClass;
var ui;
(function (ui) {
    var test;
    (function (test) {
        var TestSceneUI = /** @class */ (function (_super) {
            __extends(TestSceneUI, _super);
            function TestSceneUI() {
                return _super.call(this) || this;
            }
            TestSceneUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.loadScene("test/TestScene");
            };
            return TestSceneUI;
        }(Scene));
        test.TestSceneUI = TestSceneUI;
        REG("ui.test.TestSceneUI", TestSceneUI);
    })(test = ui.test || (ui.test = {}));
})(ui = exports.ui || (exports.ui = {}));
},{}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
